workflows:
  android-workflow:
    name: Android Workflow
    max_build_duration: 120
    environment:
      android_signing:
        - com.esparkbiz.deploy_test
      groups:
        - google_play
      vars:
        PACKAGE_NAME: "com.esparkbiz.deploy_test"
        GOOGLE_PLAY_TRACK: alpha
      flutter: stable
    scripts:
      - name: Set up local.properties
        script: |
          echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
      - name: Get Flutter packages
        script: |
          flutter packages pub get
      - name: Flutter analyze
        script: |
          flutter analyze
      - name: Flutter unit tests
        script: |
          flutter test
        ignore_failure: true
      - name: Build AAB with Flutter
        script: |
          BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name "$PACKAGE_NAME" --tracks="$GOOGLE_PLAY_TRACK") + 1))      
          flutter build apk --release \
            --build-name=1.0.$BUILD_NUMBER \
            --build-number=$BUILD_NUMBER
    artifacts:
      - build/**/outputs/**/*.aab
      - build/**/outputs/**/mapping.txt
      - flutter_drive.log
    publishing:
      email:
        recipients:
          - prathvik.sankaliya.2024@gmail.com
          - prathviksankaliya@gmail.com
        notify:
          success: true
          failure: true
      google_play:
        credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
        track: $GOOGLE_PLAY_TRACK
        submit_as_draft: true

  ios-release:
    name: iOS Release Workflow
    max_build_duration: 60 # in minutes, optional
    environment:
      vars:
        # Set environment variables required for code signing
        APP_STORE_CONNECT_PRIVATE_KEY: Encrypted(MIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQgjsSdT8aGrf/wxo4obEiTw5c1jxNYrEVcKnnffccd90OgCgYIKoZIzj0DAQehRANCAASzFEb4MQqUw6Fw2jWdterQV+9n2RryyBcvxBaTLPD0Db5ZsKlTNO2QoxjF/ITS1lV15YYfMRGRmvHK0r4VAcOX) # Your encrypted API key
        APP_STORE_CONNECT_ISSUER_ID:  69a6de82-e81a-47e3-e053î‚ˆ5b8c7c11a4d1 # e.g., 00000000-0000-0000-0000-000000000000
        APP_STORE_CONNECT_KEY_IDENTIFIER: R97TNQCJSB # e.g., ABCD1234
        FLUTTER_BUILD_MODE: release # Use 'release' mode for the build
      node: latest
      xcode: latest # Use the latest Xcode version available
      flutter: stable # Choose the Flutter channel
    triggering:
      events:
        - push
    scripts:
      - name: Set up Flutter dependencies
        script: |
          flutter pub get
      - name: Build iOS release
        script: |
          flutter build ios --release --no-codesign

      - name: Prepare for App Store submission
        script: |
          # Create the keychain to store your certificates
          security create-keychain -p "" build.keychain
          # Make the keychain default, so xcode will use it for signing
          security default-keychain -s build.keychain
          # Unlock the keychain
          security unlock-keychain -p "" build.keychain
          # Set keychain locking timeout to 1 hour
          security set-keychain-settings -lut 3600 build.keychain
          
          # Download and decrypt provisioning profiles
          curl -sSL $PROVISIONING_PROFILE_URL --output profile.mobileprovision
          
          # Copy the profile to the Profiles directory
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          
          # Decode the provisioning profile to extract the UUID
          UUID=$(security cms -D -i profile.mobileprovision | plutil -extract UUID xml1 -o - - | grep -oE '[A-Z0-9-]{36}')
          echo "Provisioning Profile UUID: $UUID"

      - name: Code signing
        script: |
          # List available signing identities
          security find-identity -p codesigning -v
          
          # Run xcode build with codesigning
          xcodebuild -workspace ios/Runner.xcworkspace \
              -scheme Runner \
              -sdk iphoneos \
              -configuration Release \
              archive \
              -archivePath $HOME/build/Runner.xcarchive \
              PROVISIONING_PROFILE_SPECIFIER=$UUID \
              CODE_SIGN_IDENTITY="Apple Distribution" \
              DEVELOPMENT_TEAM=$DEVELOPMENT_TEAM
          
          # Export the archive
          xcodebuild -exportArchive \
              -archivePath $HOME/build/Runner.xcarchive \
              -exportOptionsPlist ios/Runner/ExportOptions.plist \
              -exportPath $HOME/build

      - name: Upload to App Store Connect
        script: |
          # Using the Application Loader tool for upload
          xcrun altool --upload-app \
            -f $HOME/build/Runner.ipa \
            -t ios \
            -u "$APP_STORE_CONNECT_APPLE_ID" \
            -p "@env:APP_STORE_CONNECT_PRIVATE_KEY"

  artifacts:
    - build/Runner.ipa
